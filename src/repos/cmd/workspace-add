#!/usr/bin/env bash

set -e

usage() {
  echo "Usage: $0 [options]"
  echo
  echo "Options:"
  echo "  -f, --file <file>       Specify the repository list file (default: 'repos-to-clone.list')."
  echo "  -h, --help              Display this help message."
  echo
  echo "Each line in the repository list file can be in the following formats:"
  echo "  repo_spec [target_directory]"
  echo
  echo "Where repo_spec is one of:"
  echo "  owner/repo[@branch]"
  echo "  datasets/owner/repo[@branch]"
  echo "  https://<host>/owner/repo[@branch]"
  echo
  echo "Examples:"
  echo "  user1/project1"
  echo "  user2/project2@develop ./Projects/Repo2"
  echo "  datasets/user3/dataset1@main ../Datasets"
  echo "  https://gitlab.com/user4/project4@feature-branch ./GitLabRepos"
}

get_workspace_file() {
  # Prefer lower-case, but use CamelCase if that's all there is
  local current_dir="$1"
  local workspace_file="$current_dir/entire-project.code-workspace"
  local workspace_file_camel="$current_dir/EntireProject.code-workspace"
  if [ -f "$workspace_file" ]; then
    echo "$workspace_file"
  elif [ -f "$workspace_file_camel" ]; then
    echo "$workspace_file_camel"
  else
    # If neither exists, will create lower-case one by default
    echo "$workspace_file"
  fi
}

# Default values
repos_list_file="repos-to-clone.list"

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -f|--file)
      if [[ -n "$2" ]]; then
        repos_list_file="$2"
        shift 2
      else
        echo "Error: --file requires an argument."
        usage
        exit 1
      fi
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      usage
      exit 1
      ;;
  esac
done

if [[ ! -f "${repos_list_file}" ]]; then
  echo "Repository list file '${repos_list_file}' not found."
  exit 0
fi

# Get the absolute path of the current working directory
current_dir="$(pwd)"

# Define the path to the workspace JSON file
workspace_file="$(get_workspace_file "$current_dir")"

# Create the workspace file if it does not exist and is needed
if [ ! -f "$workspace_file" ]; then
  has_repos=false
  if [ -f "${repos_list_file}" ]; then
    while IFS= read -r repository || [ -n "$repository" ]; do
      # Skip lines that are empty or contain only whitespace
      if [[ -z "$repository" || "$repository" =~ ^[[:space:]]*$ || "$repository" =~ ^[[:space:]]*# ]]; then
        continue
      fi
      has_repos=true
      break
    done < "${repos_list_file}"
  fi
  if [ "$has_repos" = true ]; then
    echo "Workspace file does not exist. Creating it now..."
    echo '{"folders": [{"path": "."}]}' > "$workspace_file"
  fi
fi

add_to_workspace() {

  # Read and process each line from the input file
  while IFS= read -r line || [ -n "$line" ]; do
    # Skip lines that are empty, contain only whitespace, or start with a hash
    if [[ -z "$line" || "$line" =~ ^[[:space:]]*# || "$line" =~ ^[[:space:]]+$ ]]; then
      continue
    fi

    # Remove leading and trailing whitespace
    line="$(echo -e "${line}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"

    # Split line into tokens
    tokens=($line)
    repo_spec="${tokens[0]}"
    target_dir="${tokens[1]:-".."}"  # Default to parent directory if not specified

    # Ensure target directory is relative to current directory
    target_dir="$(realpath -m "${current_dir}/${target_dir}")"

    # Determine directory name
    if [[ "$repo_spec" == *@* ]]; then
      repo_url_or_path="${repo_spec%@*}"
    else
      repo_url_or_path="$repo_spec"
    fi

    if [[ "$repo_url_or_path" =~ ^https:// ]]; then
      dir="$(basename "${repo_url_or_path%%.git}" .git)"
    else
      repo="$repo_url_or_path"
      if [[ "$repo" =~ ^datasets/.* ]]; then
        dir="${repo#datasets/}"
      else
        dir="${repo#*/}"
      fi
    fi

    # Construct the full path to the repository
    repo_path="${target_dir}/${dir}"

    # Ensure the path is relative to the current directory
    relative_repo_path="$(realpath --relative-to="${current_dir}" "${repo_path}")"

    # Check if the path is already in the workspace file
    if [ -f "$workspace_file" ]; then
      if jq -e --arg path "$relative_repo_path" '.folders[] | select(.path == $path) | length > 0' "$workspace_file" > /dev/null; then
        continue
      fi
      # Add the path to the workspace JSON file
      jq --arg path "$relative_repo_path" '.folders += [{"path": $path}]' "$workspace_file" > temp.json && mv temp.json "$workspace_file"
    else
      # Create the workspace file with the repo path
      echo "{\"folders\": [{\"path\": \"$relative_repo_path\"}]}" > "$workspace_file"
    fi

  done < "$1"
}

# Attempt to add from the specified file if it exists
if [ -f "${repos_list_file}" ]; then
  add_to_workspace "${repos_list_file}"
else
  echo "Repository list file '${repos_list_file}' not found."
  exit 1
fi
