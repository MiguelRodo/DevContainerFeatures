#!/usr/bin/env bash
set -e

usage() {
  cat <<EOF
Usage: $0 [options]

Options:
  -f, --file <file>    Specify the repository list file (default: 'repos.list').
  -h, --help           Display this help message.

Each line in the repository list file may be in one of these formats:
  owner/repo[@branch] [target_directory]
  https://<host>/owner/repo[@branch] [target_directory]

Examples:
  user1/project1
  user2/project2@develop ./Projects/Repo2
  https://gitlab.com/user4/project4@feature-branch ./GitLabRepos
EOF
}

# Default values
if [ ! -f "repos.list" ] && [ -f "repos-to-clone.list" ]; then
  repos_list_file="repos-to-clone.list"
else
  repos_list_file="repos.list"
fi

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -f|--file)
      if [[ -n "$2" ]]; then
        repos_list_file="$2"
        shift 2
      else
        echo "Error: --file requires an argument." >&2
        usage
        exit 1
      fi
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1" >&2
      usage
      exit 1
      ;;
  esac
done

if [[ ! -f "${repos_list_file}" ]]; then
  echo "Repository list file '${repos_list_file}' not found." >&2
  exit 1
fi

clone_repos() {
  local current_dir
  current_dir="$(pwd)"

  clone_repo() {
    local line repo_spec branch repo_url_or_path repo_url dir target_dir
    line="$1"
    # Trim whitespace
    line="${line#"${line%%[![:space:]]*}"}"
    line="${line%"${line##*[![:space:]]}"}"

    # Split into tokens
    read -r repo_spec target_dir <<<"$line"
    target_dir="${target_dir:-..}"  # default to parent if unspecified

    # Make target absolute and create it
    target_dir="$(realpath -m "${current_dir}/${target_dir}")"
    mkdir -p "$target_dir"
    cd "$target_dir"

    # Extract branch if present
    if [[ "$repo_spec" == *@* ]]; then
      repo_url_or_path="${repo_spec%@*}"
      branch="${repo_spec##*@}"
    else
      repo_url_or_path="$repo_spec"
      branch=""
    fi

    # Determine URL and dir name
    if [[ "$repo_url_or_path" =~ ^https:// ]]; then
      repo_url="$repo_url_or_path"
      dir="$(basename "${repo_url%%.git}" .git)"
    else
      repo_url="https://github.com/${repo_url_or_path}"
      dir="${repo_url_or_path#*/}"
    fi

    # Clone or update
    if [ ! -d "$dir" ]; then
      if [ -n "$branch" ]; then
        git clone -b "$branch" "$repo_url"
      else
        git clone "$repo_url"
      fi
    else
      echo "Already exists: $target_dir/$dir"
    fi

    # Back to start
    cd "$current_dir"
  }

  while IFS= read -r repository || [ -n "$repository" ]; do
    # Skip blanks and comments
    [[ -z "$repository" || "$repository" =~ ^[[:space:]]*# ]] && continue
    clone_repo "$repository"
  done <"$repos_list_file"
}

clone_repos
