#!/usr/bin/env bash

# Exit immediately if an error occurs
set -e

# Function to display usage information
usage() {
    echo "‚ÑπÔ∏è  Usage: $(basename "$0") [OPTIONS]"
    echo ""
    echo "Description:"
    echo "  This script restores R packages for a specified project directory containing an 'renv.lock' file."
    echo "Options:"
    echo "  -d, --directory                  Project directory containing `renv.lock` file. Default is current directory."
    echo "  -r, --restore                    Run `renv::restore(transactional = TRUE)` within all projects. Default is true."
    echo "  -e, --exclude PKG1,PKG2          Comma-separated list of packages to exclude from restore."
    echo "  -d, --debug                      Enable debug mode."
    echo "  -h, --help                       Display this help message."
    echo ""
    echo "Description:"
    echo "  This script processes each top-level subdirectory in the 'renv/' directory by:"
    echo "    - Running the configuration script '/usr/local/lib/config-r-renv-pak-bioc'."
    echo "    - Optionally restoring packages using 'renv::restore', excluding specified packages."
    echo "    - Optionally running project-specific scripts from a JSON mapping."
    exit 1
}

PROJECT_DIR="."
RESTORE=true
EXCLUDE_PACKAGES=""
DBEUG=false

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -d|--directory)
            PROJECT_DIR="$2"
            shift 2
            ;;
        -r|--restore)
            RESTORE=true
            shift
            ;;
        -e|--exclude)
            EXCLUDE_PACKAGES="$2"
            shift 2
            ;;
        --debug)
            DEBUG=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "‚ùå Unknown parameter passed: $1"
            usage
            ;;
    esac
done

debug() {
    if [ "$DEBUG" = true ]; then
        echo "üêõ DEBUG: $1"
    fi
}

debug "Running renv-restore"

debug "PROJECT_DIR: $PROJECT_DIR"
debug "RESTORE: $RESTORE"
debug "EXCLUDE_PACKAGES: $EXCLUDE_PACKAGES"

# activate project?
renv_activate() {
    echo "üîç Activating project"
    Rscript -e "
        tryCatch(
            renv::activate(),
            error = function(e) {
                message('‚ö†Ô∏è  Activation threw error: ', e)
            }
        )"
    echo "‚úÖ Activation process attempted"
    echo "---------------------------------------------"
}

install_pkg() {
    echo "üîç Installing $1"
    Rscript -e "
    tryCatch(
        {   
            Sys.setenv("RENV_CONFIG_PAK_ENABLED" = "false")
            if (!requireNamespace('$1', quietly = TRUE)) {
                message('üîç $1 not found. Installing $1...')
                utils::install.packages('$1', repos = 'https://cloud.r-project.org')
            } else {
                message('‚úÖ $1 is already installed.')
            }
        },
        error = function(e) {
            message('‚ö†Ô∏è  Installation failed: ', e)
        }
    )" || true
    echo "‚úÖ Installation process attempted"
    echo "---------------------------------------------"
}

install_pak_bioc() {
    echo "üîç Installing pak and BiocManager"
    install_pkg pak
    install_pkg BiocManager
}

restore() {
    echo "üîÑ Attempting to restore packages"
    # Prepare the exclude packages parameter for R
    if [ -n "$EXCLUDE_PACKAGES" ]; then
        EXCLUDE_ARRAY=$(echo "$EXCLUDE_PACKAGES" | sed "s/,/','/g")
        debug "EXCLUDE_ARRAY: $EXCLUDE_ARRAY"
        Rscript -e "
            tryCatch(
                renv::restore(exclude=c('$EXCLUDE_ARRAY'), transactional = TRUE),
                error = function(e) {
                    message('‚ö†Ô∏è  Restore failed: ', e)
                }
            )"
    else
        Rscript -e "
            tryCatch(
                renv::restore(transactional = TRUE),
                error = function(e) {
                    message('‚ö†Ô∏è  Restore failed: ', e)
                }
            )"
    fi
    echo "‚úÖ Restore process attempted"
    echo "---------------------------------------------"
}

run_custom_scripts() {
    if [ -f "$PROJECT_DIR/config-r-renv.sh" ]; then 
        echo "üîç Found shell script"
        ./config-r-renv.sh "$EXCLUDE_PACKAGES" || {
            echo "‚ö†Ô∏è  Project-specific shell script attempted"
            echo "---------------------------------------------"
        }
    fi

    if [ -f "$PROJECT_DIR/config-r-renv.R" ]; then
        echo "üîç Found R script for"
        cd "$PROJECT_DIR"
        Rscript config-r-renv.R "$EXCLUDE_PACKAGES" || {
            echo "‚ö†Ô∏è  Project-specific R script attempted"
            echo "---------------------------------------------"
        }
    fi
}

main() {
    ORIG_DIR=$(pwd)
    PROJECT_NAME=$(basename "$PROJECT_DIR")
    echo "üöÄ Processing project: $PROJECT_NAME"
    trap 'cd "$ORIG_DIR"' EXIT
    cd "$PROJECT_DIR"
    # Activate project
    renv_activate 
    # Install pak and BiocManager
    install_pak_bioc
    # Run renv::restore
    restore
    # Run custom scripts
    run_custom_scripts
    echo "‚úÖ Finished processing project: $PROJECT_NAME"
    echo "---------------------------------------------"
}

main
