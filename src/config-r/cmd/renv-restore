#!/usr/bin/env bash

# Exit immediately if an error occurs
set -e

# Function to display usage information
usage() {
    echo "‚ÑπÔ∏è  Usage: $(basename "$0") [OPTIONS]"
    echo ""
    echo "Description:"
    echo "  This script restores R packages for a specified project directory containing an 'renv.lock' file."
    echo "Options:"
    echo "  -d, --directory DIRECTORY        Project directory containing 'renv.lock' file. Default is current directory."
    echo "  -r, --restore                    Run renv::restore(transactional = TRUE) within the project. Default is true."
    echo "  -e, --exclude PKG1,PKG2          Comma-separated list of packages to exclude from restore."
    echo "  -p, --pak                        Use pak for package management."
    echo "  -D, --debug                      Enable debug mode."
    echo "  -h, --help                       Display this help message."
    exit 1
}

PROJECT_DIR="."
RESTORE=false
PKG_EXCLUDE=""
DEBUG=false
USE_PAK=false

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -r|--restore)
            RESTORE=true
            shift
            ;;
        -e|--exclude)
            if [[ -n "${2:-}" && ! "$2" =~ ^- ]]; then
                PKG_EXCLUDE="$2"
                shift 2
            else
                echo "‚ùå --exclude requires a non-empty package name argument."
                usage
            fi
            ;;
        -d|--directory)
            if [[ -n "${2:-}" && ! "$2" =~ ^- ]]; then
                PROJECT_DIR="$2"
                shift 2
            else
                echo "‚ùå --directory requires a directory path argument."
                usage
            fi
            ;;
        -p|--pak)
            USE_PAK=true
            shift
            ;;
        -D|--debug)
            DEBUG=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "‚ùå Unknown parameter passed: $1"
            usage
            ;;
    esac
done

debug() {
    if [ "$DEBUG" = true ]; then
        echo "üêõ DEBUG: $1"
    fi
}

debug "Running renv-restore"
debug "PROJECT_DIR: $PROJECT_DIR"
debug "RESTORE: $RESTORE"
debug "PKG_EXCLUDE: $PKG_EXCLUDE"
debug "USE_PAK: $USE_PAK"

# Activate project
renv_activate() {
    echo "üîç Activating project"
    Rscript -e "
        tryCatch(
            renv::activate(),
            error = function(e) {
                message('‚ö†Ô∏è  Activation threw error: ', e)
            }
        )"
    echo "‚úÖ Activation process attempted"
    echo "---------------------------------------------"
}

r_lib_paths() {
    # echo out R library paths
    debug "R library paths:"
    R_LIB_PATHS=$(Rscript -e 'cat(.libPaths(), sep="\n")' 2>/dev/null | tr -d '\r')

    if [ $? -eq 0 ] && [ -n "$R_LIB_PATHS" ]; then
        debug "$R_LIB_PATHS"
    else
        debug "Failed to retrieve R library paths."
    fi
}


restore_renv() {
    echo "Restoring original renv version"
    Rscript -e "
        tryCatch(
            renv::restore(packages = 'renv', transactional = TRUE),
            error = function(e) {
                message('‚ö†Ô∏è  Restore failed: ', e)
            }
        )"
}

install_pak() {
    local version=$1

    if [ "${version}" = "auto" ]; then
        if su "${USERNAME}" -c "R -s -e 'packageVersion(\"pak\")'" >/dev/null 2>&1; then
            echo "pak is already installed. Skip pak installation..."
            return
        else
            version="stable"
        fi
    fi

    echo "Installing pak ${version}..."
    # shellcheck disable=SC2016
    su "${USERNAME}" -c 'R -q -e "install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/'"${version}"'/%s/%s/%s\", .Platform\$pkgType, R.Version()\$os, R.Version()\$arch))"'
}

install_bioc() {
    echo "üîç Installing $1"
    local renv_config_pak_orig="$RENV_CONFIG_PAK_ENABLED"
    if [ "$renv_config_pak_orig" = "true" ]; then
        export RENV_CONFIG_PAK_ENABLED=false
    fi
    Rscript -e "
    tryCatch( 
        {  
            if (isFALSE(requireNamespace('$1', quietly = TRUE))) {
                message('üîç $1 not found. Installing $1...')
                utils::install.packages('$1', repos = 'https://cloud.r-project.org')
            } else {
                message('‚úÖ $1 is already installed.')
            }
        },
        error = function(e) {
            message('‚ö†Ô∏è  Installation failed: ', e)
        }
    )"
    if [ "$renv_config_pak_orig" = "true" ]; then
        export RENV_CONFIG_PAK_ENABLED=true
    fi
    echo "‚úÖ Installation process attempted"
    echo "---------------------------------------------"
}

install_pak_bioc() {
    echo "üîç Installing pak and BiocManager"
    install_pkg pak
    install_pkg BiocManager
}

restore() {
    echo "üîÑ Attempting to restore packages"
    if [ -n "$PKG_EXCLUDE" ]; then
        EXCLUDE_ARRAY=$(echo "$PKG_EXCLUDE" | sed "s/,/\",\"/g")
        debug "EXCLUDE_ARRAY: $EXCLUDE_ARRAY"
        Rscript -e "
            tryCatch(
                {
                    if ('transactional' %in% names(formals(renv::restore))) {
                        renv::restore(exclude = c(\"$EXCLUDE_ARRAY\"), transactional = TRUE)
                    } else {
                        renv::restore(exclude = c(\"$EXCLUDE_ARRAY\"))
                    }
                },
                error = function(e) {
                    message('‚ö†Ô∏è  Restore failed: ', e)
                }
            )"
    else
        Rscript -e "
            tryCatch(
                {
                    if ('transactional' %in% names(formals(renv::restore))) {
                        renv::restore(transactional = TRUE)
                    } else {
                        renv::restore()
                    }
                },
                error = function(e) {
                    message('‚ö†Ô∏è  Restore failed: ', e)
                }
            )"
    fi
    echo "‚úÖ Restore process attempted"
    echo "---------------------------------------------"
}

run_custom_scripts() {
    if [ -f "config-r-renv.sh" ]; then 
        echo "üîç Found shell script"
        if ! ./config-r-renv.sh "$PKG_EXCLUDE"; then
            echo "‚ö†Ô∏è  Project-specific shell script failed"
            echo "---------------------------------------------"
        fi
    fi

    if [ -f "config-r-renv.R" ]; then
        echo "üîç Found R script"
        cd "$PROJECT_DIR"
        if ! Rscript config-r-renv.R "$PKG_EXCLUDE"; then
            echo "‚ö†Ô∏è  Project-specific R script failed"
            echo "---------------------------------------------"
        fi
    fi
}

main() {
    ORIG_DIR=$(pwd)
    PROJECT_NAME=$(basename "$PROJECT_DIR")
    echo "üöÄ Processing project: $PROJECT_NAME"
    trap 'cd "$ORIG_DIR"' EXIT
    cd "$PROJECT_DIR"
    r_lib_paths
    renv_activate
    r_lib_paths
    install_pak_bioc
    restore
    run_custom_scripts
    echo "‚úÖ Finished processing project: $PROJECT_NAME"
    echo "---------------------------------------------"
}

main
