#!/usr/bin/env bash

# Exit immediately if an error occurs
set -e

# Function to display usage information
usage() {
    echo "‚ÑπÔ∏è  Usage: $(basename "$0") [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -d, --directory                  Directory containing project directories. Default is '/usr/local/share/config-r/renv'."
    echo "  -e, --exclude PKG1,PKG2          Comma-separated list of packages to exclude from restore."
    echo "  -r, --restore                    Run renv::restore(transactional = TRUE) within all projects. Default is true."
    echo "  -p, --pak                        Use pak for package management."
    echo "  -D, --debug                      Enable debug mode."
    echo "  -h, --help                       Display this help message."
    echo ""
    echo "Description:"
    echo "  This script processes each top-level subdirectory in the specified directory by:"
    echo "    - Restoring packages using renv::restore, excluding specified packages (if restore is enabled)."
    echo "    - Running project-specific scripts if present (config-r-renv.R and config-r-renv.sh)."
    exit 1
}

# Initialize variables
RESTORE=false
PKG_EXCLUDE=""
DEBUG=false
USE_PAK=false
RENV_DIR="/usr/local/share/config-r/renv"

while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -r|--restore)
            RESTORE=true
            shift
            ;;
        -e|--exclude)
            if [[ -n "${2:-}" && ! "$2" =~ ^- ]]; then
                PKG_EXCLUDE="$2"
                shift 2
            else
                echo "‚ùå --exclude requires a non-empty package name argument."
                usage
            fi
            ;;
        -p|--pak)
            USE_PAK=true
            shift
            ;;
        -d|--directory)
            if [[ -n "${2:-}" && ! "$2" =~ ^- ]]; then
                RENV_DIR="$2"
                shift 2
            else
                echo "‚ùå --directory requires a directory path argument."
                usage
            fi
            ;;
        -D|--debug)
            DEBUG=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "‚ùå Unknown parameter passed: $1"
            usage
            ;;
    esac
done

debug() {
    if [ "$DEBUG" = true ]; then
        echo "üêõ DEBUG: $1"
    fi
}

debug "Running renv-restore-build"
debug "RESTORE: $RESTORE"
debug "PKG_EXCLUDE: $PKG_EXCLUDE"
debug "USE_PAK: $USE_PAK"
debug "RENV_DIR: $RENV_DIR"

exit_early_if_needed() {
    if [ ! -d "$RENV_DIR" ]; then
        echo "‚ÑπÔ∏è No 'renv/' directory found in '$RENV_DIR'."
        exit 0
    fi

    # Check if there are subdirectories within `RENV_DIR`
    if [ -z "$(find "$RENV_DIR" -mindepth 1 -maxdepth 1 -type d)" ]; then
        echo "‚ÑπÔ∏è No projects found in '$RENV_DIR'."
        exit 0
    fi
}

restore_projects() {
    # Loop over each top-level subdirectory in 'renv/', excluding 'self'
    while IFS= read -r PROJECT_DIR; do
        restore_project "$PROJECT_DIR"
    done < <(find "$RENV_DIR" -mindepth 1 -maxdepth 1 -type d)
}

restore_project() {
    local project_dir="$1"
    debug "project_dir: $project_dir"
    
    # Construct the command as an array
    local command=(/usr/local/bin/config-r-renv-restore --directory "$project_dir")

    # Append options based on conditions
    if [ "$RESTORE" = "true" ]; then
        command+=("--restore")
    fi

    if [ "$DEBUG" = "true" ]; then
        command+=("--debug")
    fi

    if [ "$USE_PAK" = "true" ]; then
        command+=("--pak")
    fi

    if [ -n "$PKG_EXCLUDE" ]; then
        command+=("--exclude" "$PKG_EXCLUDE")
    fi

    # Log the command for debugging purposes
    echo "üîß Executing command: ${command[*]}"

    # Execute the command with error handling
    if ! "${command[@]}"; then
        echo "‚ùå config-r-renv-restore-build failed with command: ${command[*]}"
    fi
}

main() {
    exit_early_if_needed
    restore_projects
    echo "üéâ All projects have had restoration attempted."
}

main
